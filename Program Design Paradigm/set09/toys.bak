#lang racket
(require rackunit)
(require "extras.rkt")
(require 2htdp/universe)   
(require 2htdp/image)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; CONSTANTS

(define WIDTH 600)
(define HEIGHT 400)
(define EMPTY-CANVAS (empty-scene WIDTH HEIGHT))
(define CANVAS-CENTER-X (/ WIDTH 2))
(define CANVAS-CENTER-Y (/ HEIGHT 2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; INTERFACEs

;; Every object that lives in the world must implement the Widget<%>
;; interface.

(define Widget<%>
  (interface ()
    
    ; -> Widget
    ; GIVEN: no arguments
    ; RETURNS: the state of this object that should follow at time t+1.
    after-tick          
    
    ; Integer Integer -> Widget
    ; GIVEN: a location
    ; RETURNS: the state of this object that should follow the
    ; specified mouse event at the given location.
    after-button-down
    after-button-up
    after-drag
    
    ; KeyEvent : KeyEvent -> Widget
    ; GIVEN: a key event and a time
    ; RETURNS: the state of this object that should follow the
    ; given key event
    after-key-event     
    
    ; Scene -> Scene
    ; GIVEN: a scene
    ; RETURNS: a scene like the given one, but with this object
    ; painted on it.
    add-to-scene
    ))

;; The World implements the WorldState<%> interface

(define WorldState<%>
  (interface ()
    
    ; -> World
    ; GIVEN: no arguments
    ; RETURNS: the state of the world at the next tick
    after-tick          
    
    ; Integer Integer MouseEvent-> World
    ; GIVEN: a location
    ; RETURNS: the state of the world that should follow the
    ; given mouse event at the given location.
    after-mouse-event
    
    
    ; KeyEvent : KeyEvent -> Widget
    ; GIVEN: a key event
    ; RETURNS: the state of the world that should follow the
    ; given key event
    after-key-event     
    
    ; -> Scene
    ; GIVEN: a scene
    ; RETURNS: a scene that depicts this World
    to-scene
    ))

(define PlaygroundState<%>
  (interface (WorldState<%>) ;; this means: include all the methods in
    ;; WorldState<%>. 
    
    ;; -> Integer
    ;; RETURN: the x and y coordinates of the target
    target-x
    target-y
    
    ;; -> Boolean
    ;; Is the target selected?
    target-selected?
    
    ;; -> ListOfToy<%>
    get-toys
    
    ))

(define Toy<%> 
  (interface (Widget<%>)  ;; this means: include all the methods in
    ;;  Widget<%>. 
    
    ;; -> Int
    ;; RETURNS: the x or y position of the center of the toy
    toy-x
    toy-y
    
    ;; -> Int
    ;; RETURNS: some data related to the toy.  The interpretation of
    ;; this data depends on the class of the toy.
    ;; for a square, it is the velocity of the square (rightward is
    ;; positive)
    ;; for a throbber, it is the current radius of the throbber
    ;; for the clock, it is the current value of the clock
    ;; for a football, it is the current size of the football (in
    ;; arbitrary units; bigger is more)
    toy-data
    
    
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; CLASSES

(define Target%
  (class* object% (Widget<%>)
    (init-field x y)   
    (init-field selected?) 
    (init-field off-mx off-my)
    (field [r 10])   
    (field [TARGET-IMG (circle r "outline" "blue")])
    
    (super-new)
    
    ;; after-tick : Time -> Heli
    ;; RETURNS: A heli like this one, but as it should be after a tick
    ;; a selected heli doesn't move.
    ;; STRATEGY: Cases on selected?
    (define/public (after-tick)
      this)
    
    ;; after-key-event : KeyEvent -> Heli
    ;; RETURNS: A world like this one, but as it should be after the
    ;; given key event.
    ;; DETAILS: a heli ignores key events
    (define/public (after-key-event kev)
      this)      
    
    ; after-button-down : Integer Integer -> Heli
    ; GIVEN: the location of a button-down event
    ; STRATEGY: Cases on whether the event is in the helicopter
    (define/public (after-button-down mx my)
      (if (in-target? mx my)
          (new Target%
               [x x][y y]
               [selected? true]
               [off-mx (- mx x)]
               [off-my (- my y)])
          this))
    
    ; after-button-up : Integer Integer -> Heli
    ; GIVEN: the location of a button-up event
    ; STRATEGY: Cases on whether the event is in the helicopter.
    ; If the heli is selected, then unselect it.
    (define/public (after-button-up mx my)
      (if (in-target? mx my)
          (new Target%
               [x x][y y]
               [selected? false]
               [off-mx off-mx]
               [off-my off-my])
          this))   
    
    ; after-drag : Integer Integer -> Heli
    ; GIVEN: the location of a drag event
    ; STRATEGY: Cases on whether the heli is selected.
    ; If it is selected, move it so that the vector from the center to
    ; the drag event is equal to (mx, my)
    (define/public (after-drag mx my)
      (if selected?
          (new Target%
               [x (- mx off-mx)]
               [y (- my off-my)]
               [selected? true]
               [off-mx off-mx]
               [off-my off-my])
          this))   
    
    
    ;; to-scene : Scene -> Scene
    ;; RETURNS: a scene like the given one, but with this heli painted
    ;; on it.
    (define/public (add-to-scene scene)
      (place-image TARGET-IMG x y scene))
    
    (define/public (target-x) x)
    ;; -> Int
    (define/public (target-y) y)
    ;; -> Boolean
    (define/public (target-selected?) selected?)
    
    ;; in-target? : Integer Integer -> Boolean
    ;; GIVEN: a location on the canvas
    ;; RETURNS: true iff the location is inside this target.
    (define (in-target? other-x other-y)
      (<= (+ (sqr (- x other-x)) (sqr (- y other-y)))
          (sqr r)))
    
    ;; test methods, to probe the heli state.  Note that we don't have
    ;; a probe for radius.
    ;; -> Int
    (define/public (for-test:x) x)
    ;; -> Int
    (define/public (for-test:y) y)
    ;; -> Boolean
    (define/public (for-test:selected?) selected?)
    
    ;; -> (list Int Int Boolean)
    (define/public (for-test:heli-state) (list x y selected?))
    
    ))

(define WorldState%
  (class* object% (PlaygroundState<%>)
    (init-field target)
    (init-field toys) ;  ListOfWidget
    (init-field t)    ;  Time
    
    (super-new)
    
    ;; after-tick : -> World
    ;; Use HOFC map on the Widget's in this World
    (define/public (after-tick)
      (make-world-state
       (send target after-tick)
       (map
        (lambda (toy) (send toy after-tick))
        toys)
       (+ 1 t)))
    
    ;; to-scene : -> Scene
    ;; Use HOFC foldr on the Widget's in this World
    (define/public (to-scene)
      (foldr
       (lambda (obj scene)
         (send obj add-to-scene scene))
       EMPTY-CANVAS
       (cons target toys)))
    
    
    ;; after-key-event : KeyEvent -> WorldState
    ;; STRATEGY: Cases on kev
    ;; "b" and "h" create new bomb and new helicopter;
    ;; other keystrokes are passed on to the objects in the world.
    
    (define/public (after-key-event kev)
      (cond
        [(key=? kev "s")
         (make-world-state
          target
          (cons (new-sqr (target-x) (target-y)) toys)
          t)]
        #;[(key=? kev NEW-HELI-EVENT)
           (make-world-state
            (cons (new-heli) toys)
            t)]
        #;[else
           (make-world-state
            (map
             (lambda (obj) (send obj after-key-event kev))
             toys)
            t)])
      this)
    
    ;; world-after-mouse-event : Nat Nat MouseEvent -> WorldState
    ;; STRATGY: Cases on mev
    (define/public (after-mouse-event mx my mev)
      (cond
        [(mouse=? mev "button-down")
         (world-after-button-down mx my)]
        [(mouse=? mev "drag")
         (world-after-drag mx my)]
        [(mouse=? mev "button-up")
         (world-after-button-up mx my)]
        [else this]))
    
    ;; the next few functions are local functions, not in the interface.
    
    (define (world-after-button-down mx my)
      (make-world-state
       (send target after-button-down mx my)
       (map
        (lambda (obj) (send obj after-button-down mx my))
        toys)
       t))
    
    
    (define (world-after-button-up mx my)
      (make-world-state
       (send target after-button-up mx my)
       (map
        (lambda (obj) (send obj after-button-up mx my))
        toys)
       t))
    
    (define (world-after-drag mx my)
      (make-world-state
       (send target after-drag mx my)
       (map
        (lambda (obj) (send obj after-drag mx my))
        toys)
       t))
    
    
    (define/public (target-x)
      (send target target-x))
    (define/public (target-y)
      (send target target-y))
    
    ;; -> Boolean
    ;; Is the target selected?
    (define/public (target-selected?)
      (send target target-selected?))
    
    ;; -> ListOfToy<%>
    (define/public (get-toys)
      toys)
    
    ))

(define Square%
  (class* object% (Toy<%>)   
    (init-field center-x center-y)
    (init-field selected?) 
    (init-field off-mx off-my)
    (field [LEN 40])
    (field [HALF-LEN (/ LEN 2)])
    (field [SQUARE-IMG (rectangle LEN LEN "outline" "red")])
    (field [SPEED 5])
    
    (super-new)
    
    ;; after-tick : Time -> Heli
    ;; RETURNS: A heli like this one, but as it should be after a tick
    ;; a selected heli doesn't move.
    ;; STRATEGY: Cases on selected?
    (define/public (after-tick)
      (if selected?
          this
          (new Square%
               [center-x (+ center-x SPEED)]
               [center-y center-y]
               [selected? selected?]
               [off-mx off-mx]
               [off-my off-mx])))
    
    ;; after-key-event : KeyEvent -> Heli
    ;; RETURNS: A world like this one, but as it should be after the
    ;; given key event.
    ;; DETAILS: a heli ignores key events
    (define/public (after-key-event kev)
      this)      
    
    ; after-button-down : Integer Integer -> Heli
    ; GIVEN: the location of a button-down event
    ; STRATEGY: Cases on whether the event is in the helicopter
    (define/public (after-button-down mx my)
      (if (in-sqr? mx my)
          (new Target%
               [center-x center-x][center-y center-y]
               [selected? true]
               [off-mx (- mx center-x)]
               [off-my (- my center-y)])
          this))
    
    ; after-button-up : Integer Integer -> Heli
    ; GIVEN: the location of a button-up event
    ; STRATEGY: Cases on whether the event is in the helicopter.
    ; If the heli is selected, then unselect it.
    (define/public (after-button-up mx my)
      (if (in-sqr? mx my)
          (new Target%
               [center-x center-x][center-y center-y]
               [selected? false]
               [off-mx off-mx]
               [off-my off-my])
          this))   
    
    ; after-drag : Integer Integer -> Heli
    ; GIVEN: the location of a drag event
    ; STRATEGY: Cases on whether the heli is selected.
    ; If it is selected, move it so that the vector from the center to
    ; the drag event is equal to (mx, my)
    (define/public (after-drag mx my)
      (if selected?
          (new Target%
               [center-x (- mx off-mx)]
               [center-y (- my off-my)]
               [selected? true]
               [off-mx off-mx]
               [off-my off-my])
          this))   
    
    
    ;; to-scene : Scene -> Scene
    ;; RETURNS: a scene like the given one, but with this heli painted
    ;; on it.
    (define/public (add-to-scene scene)
      (place-image SQUARE-IMG center-x center-y scene))
    
    ;; in-target? : Integer Integer -> Boolean
    ;; GIVEN: a location on the canvas
    ;; RETURNS: true iff the location is inside this target.
    (define (in-sqr? other-x other-y)
      (and (<= (- center-x HALF-LEN)
               other-x
               (+ center-x HALF-LEN))
           (<= (- center-y HALF-LEN)
               other-y
               (+ center-y HALF-LEN))))
    
    ;; test methods, to probe the heli state.  Note that we don't have
    ;; a probe for radius.
    ;; -> Int
    (define/public (for-test:x) center-x)
    ;; -> Int
    (define/public (for-test:y) center-y)
    ;; -> Boolean
    (define/public (for-test:selected?) selected?)
    
    ;; -> (list Int Int Boolean)
    (define/public (for-test:heli-state) (list center-x center-y selected?))
    
    (define/public (toy-x)
      center-x)
    (define/public (toy-y)
      center-y)
    (define/public (toy-data)
      SPEED)
    ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; run : PosReal -> World
;;; GIVEN: a frame rate, in secs/tick
;;; EFFECT: runs an initial world at the given frame rate
;;; RETURNS: the final state of the world
(define (run rate)
  (big-bang (initial-world)
            (on-tick
             (lambda (w) (send w after-tick))
             rate)
            (on-draw
             (lambda (w) (send w to-scene)))
            (on-key
               (lambda (w kev)
                 (send w after-key-event kev)))
            (on-mouse
             (lambda (w mx my mev)
               (send w after-mouse-event mx my mev)))))




;; initial-world : -> WorldState
;; RETURNS: a world with a helicopter and no bombs
(define (initial-world)
  (make-world-state
   (new-target)
   empty
   0))



(define (make-world-state target toys t)
  (new WorldState% [target target] [toys toys] [t t]))



(define (new-target)
  (new Target% [x CANVAS-CENTER-X] [y CANVAS-CENTER-Y]
       [selected? false] [off-mx 0] [off-my 0]))



(define (new-sqr tar-x tar-y)
  (new Square% [center-x tar-x] [center-y tar-y]
       [selected? false] [off-mx 0] [off-my 0]))





(run 0.5)
